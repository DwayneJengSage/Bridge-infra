Description: Common resources for AWS account
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InitNewUserPassword:
    Type: String
    NoEcho: true
  JacobianUserPassword:
    Type: String
    NoEcho: true
  NewRelicAccountId:
    Type: String
    NoEcho: true
  NewRelicExternalId:
    Type: String
    NoEcho: true
  OperatorEmail:
    Type: String
  FhcrcVpnCidrip:
    Type: String
    NoEcho: true
Resources:
  # !! IMPORTANT !! - AWS API will refuse to remove users that have attached resources.
  # Therefore you must do the following before deleting them from this file:
  # 1. Detach or remove the following user resources: login profile, attached
  #    MFA device, access-keys, ssh-keys, and policies.
  # 2. Detach the user from all groups.
  AWSIAMXavierSchildwachterUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: x.schildwachter@sagebase.org
      Groups:
        - !Ref AWSIAMPowerUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMKhaiDoUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: khai.do@sagebase.org
      Groups:
        - !Ref AWSIAMDeveloperUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMAlxDarkUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: alx.dark@sagebase.org
      Groups:
        - !Ref AWSIAMDeveloperUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMDwayneJeng:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: dwayne.jeng@sagebase.org
      Groups:
        - !Ref AWSIAMDeveloperUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMJoshuaLiuUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: joshua.liu@sagebase.org
      Groups:
        - !Ref AWSIAMDeveloperUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMDeveloperUsersGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
        - !Ref AWSIAMEnforceMfaPolicy
        - !Ref AWSIAMDynamoDenyDeletePolicy
        - !Ref AWSIAMRdsDenyDeletePolicy
  AWSIAMPowerUsersGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
        - !Ref AWSIAMEnforceMfaPolicy
  AWSIAMAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt AWSIAMXavierSchildwachterUser.Arn
                - !GetAtt AWSIAMKhaiDoUser.Arn
                - !GetAtt AWSIAMAlxDarkUser.Arn
                - !GetAtt AWSIAMDwayneJeng.Arn
            Action:
              - "sts:AssumeRole"
      Path: "/"
  AWSIAMDynamoDenyDeletePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Deny
            Action:
              # UpdateTable operation retricts deletion of indexes
              - dynamodb:UpdateTable
              - dynamodb:DeleteTable
            Resource: "*"
  AWSIAMRdsDenyDeletePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Deny
            Action:
              - rds:DeleteDBCluster
              - rds:DeleteDBClusterSnapshot
              - rds:DeleteDBInstance
              - rds:DeleteDBSnapshot
            Resource: "*"
  AWSIAMAdminRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "admin"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        -
          !Ref AWSIAMAdminRole
  AWSIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref "AWSIAMAdminRole"
  # resources for auditors
  JacobianAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - codecommit:GetCommit
            - codecommit:GitPull
            - dynamodb:BatchGetItem
            - dynamodb:GetItem
            - dynamodb:GetRecords
            - sqs:ReceiveMessage
            - sdb:Select
            Resource: "*"
  AWSIAMJacobianUser:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMAuditorsGroup
      LoginProfile:
        Password: !Ref JacobianUserPassword
  AWSIAMAuditorsGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - !Ref JacobianAccessPolicy
        - !Ref AWSIAMEnforceMfaPolicy
  # resources for logging services
  AWSIAMSumoLogicUser:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMLoggingServiceGroup
  AWSIAMSumoLogicUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref AWSIAMSumoLogicUser
  IAMLoggingServiceManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:ListBucketVersions'
              - 's3:ListBucket'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::elasticbeanstalk-'
                  - !Ref AWS::Region
                  - '-'
                  - !Ref AWS::AccountId
                  - '/*'
              - !Join
                - ''
                - - 'arn:aws:s3:::elasticbeanstalk-'
                  - !Ref AWS::Region
                  - '-'
                  - !Ref AWS::AccountId
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AWSS3CloudtrailBucket
                  - '/*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AWSS3CloudtrailBucket
  AWSIAMLoggingServiceGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - !Ref IAMLoggingServiceManagedPolicy
  # resources for app monitoring services
  AWSIAMNewRelicBudgetPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "NewRelicBudgetPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "budgets:ViewBudget"
            Resource: "*"
      Roles:
        -
          Ref: AWSIAMNewRelicInfrastructureServiceRole
  AWSIAMNewRelicInfrastructureServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref NewRelicAccountId
                    - ':root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: !Ref NewRelicExternalId
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
  # policy to enforce MFA
  AWSIAMEnforceMfaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAllUsersToListAccounts
            Effect: Allow
            Action:
              - 'iam:ListAccountAliases'
              - 'iam:ListUsers'
              - 'iam:GetAccountSummary'
            Resource: '*'
          - Sid: AllowIndividualUserToSeeAndManageOnlyTheirOwnAccountInformation
            Effect: Allow
            Action:
              - 'iam:ChangePassword'
              - 'iam:CreateAccessKey'
              - 'iam:CreateLoginProfile'
              - 'iam:DeleteAccessKey'
              - 'iam:DeleteLoginProfile'
              - 'iam:GetAccountPasswordPolicy'
              - 'iam:GetLoginProfile'
              - 'iam:ListAccessKeys'
              - 'iam:UpdateAccessKey'
              - 'iam:UpdateLoginProfile'
              - 'iam:ListSigningCertificates'
              - 'iam:DeleteSigningCertificate'
              - 'iam:UpdateSigningCertificate'
              - 'iam:UploadSigningCertificate'
              - 'iam:ListSSHPublicKeys'
              - 'iam:GetSSHPublicKey'
              - 'iam:DeleteSSHPublicKey'
              - 'iam:UpdateSSHPublicKey'
              - 'iam:UploadSSHPublicKey'
            Resource: !Join
              - ''
              - - 'arn:aws:iam::'
                - !Ref AWS::AccountId
                - ':user/${aws:username}'
          - Sid: AllowIndividualUserToListOnlyTheirOwnMFA
            Effect: Allow
            Action:
              - 'iam:ListVirtualMFADevices'
              - 'iam:ListMFADevices'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref AWS::AccountId
                  - ':mfa/*'
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref AWS::AccountId
                  - ':user/${aws:username}'
          - Sid: AllowIndividualUserToManageTheirOwnMFA
            Effect: Allow
            Action:
              - 'iam:CreateVirtualMFADevice'
              - 'iam:DeleteVirtualMFADevice'
              - 'iam:RequestSmsMfaRegistration'
              - 'iam:FinalizeSmsMfaRegistration'
              - 'iam:EnableMFADevice'
              - 'iam:ResyncMFADevice'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref AWS::AccountId
                  - ':mfa/${aws:username}'
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref AWS::AccountId
                  - ':user/${aws:username}'
          - Sid: AllowIndividualUserToDeactivateOnlyTheirOwnMFAOnlyWhenUsingMFA
            Effect: Allow
            Action:
              - 'iam:DeactivateMFADevice'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref AWS::AccountId
                  - ':mfa/${aws:username}'
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref AWS::AccountId
                  - ':user/${aws:username}'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
          - Sid: BlockAnyAccessOtherThanAboveUnlessSignedInWithMFA
            Effect: Deny
            NotAction: 'iam:*'
            Resource: '*'
            Condition:
              BoolIfExists:
                'aws:MultiFactorAuthPresent': 'false'
  # resources for cloudtrail
  AWSS3CloudtrailBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Properties: {}
  AWSIAMS3CloudtrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3CloudtrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}
          -
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  AWSSNSCloudtrailTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSNSCloudtrailTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
        - !Ref AWSSNSCloudtrailTopic
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          -
            Sid: "CloudtrailTopicPolicy"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  AWSCloudtrailTrail:
    DependsOn:
      - AWSIAMS3CloudtrailBucketPolicy
      - AWSSNSCloudtrailTopicPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      S3BucketName: !Ref AWSS3CloudtrailBucket
      SnsTopicName: !GetAtt AWSSNSCloudtrailTopic.TopicName
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
  # Cloudformation bucket for CF templates
  AWSS3CloudformationBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub '${AWS::StackName}-cloudformation-artifacts-${AWS::AccountId}'
  # Monitor Cloudformation deployments
  # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-rollback-email/
  AWSSNSCloudformationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSIAMCloudformationTopicPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: "CloudformationSnsPolicy"
            Effect: "Allow"
            Resource: !Ref AWSSNSCloudformationTopic
            Action: "SNS:Publish"
          -
            Sid: "CloudformationLogsPolicy"
            Effect: "Allow"
            Resource: "arn:aws:logs:*:*:*"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
  AWSIAMCloudformationLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref AWSIAMCloudformationTopicPolicy
  AWSLambaCloudformationFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !Ref AWSIAMCloudformationLambdaRole
      Runtime: "nodejs4.3"
      Environment:
        Variables:
          CloudformationTopicArn: !Ref AWSSNSCloudformationTopic
      Code:
        ZipFile: >
          topic_arn = process.env.CloudformationTopicArn;
          var AWS = require('aws-sdk');
          AWS.config.region_array = topic_arn.split(':'); // splits the ARN in to and array
          AWS.config.region = AWS.config.region_array[3];  // makes the 4th variable in the array (will always be the region)


          // ####################   BEGIN LOGGING   ########################

          console.log(topic_arn);   // just for logging to the that the var was parsed correctly
          console.log(AWS.config.region_array); // to see if the SPLIT command worked
          console.log(AWS.config.region_array[3]); // to see if it got the region correctly
          console.log(AWS.config.region); // to confirm that it set the AWS.config.region to the correct region from the ARN

          // ####################  END LOGGING (you can remove this logging section)  ########################


          exports.handler = function(event, context) {
              const message = event.Records[0].Sns.Message;
              if (message.indexOf("UPDATE_ROLLBACK_IN_PROGRESS") > -1) {
                  var fields = message.split("\n");
                  subject = fields[11].replace(/['']+/g, '');
                  send_SNS_notification(subject, message);
              }
          };

          function send_SNS_notification(subject, message) {
              var sns = new AWS.SNS();
              subject = subject + " is in UPDATE_ROLLBACK_IN_PROGRESS";
              sns.publish({
                  Subject: subject,
                  Message: message,
                  TopicArn: topic_arn
              }, function(err, data) {
                  if (err) {
                      console.log(err.stack);
                      return;
                  }
                  console.log('push sent');
                  console.log(data);
              });
          };
  AWSSNSCloudformationNotifyLambdaTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt AWSLambaCloudformationFunction.Arn
          Protocol: lambda
  # dynamodb monitoring resources
  AWSSNSDynamoTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSCWDynmoGetRecordsErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSDynamoTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: SystemErrors
      Namespace: AWS/DynamoDB
      Dimensions:
        -
          "Name": "Operation"
          "Value": "GetRecords"
      Period: 900
      Statistic: Maximum
      Threshold: 10
      TreatMissingData: notBreaching
  AWSCWDynamoDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: !Join
        - ''
        - - >-
            {"widgets": [
            {"type":"metric", "x":0, "y":0, "width":12, "height":6, "properties":
            {"metrics":[
            [ "AWS/DynamoDB", "SystemErrors", "Operation", "GetRecords", {"stat": "Sum"}]],
            "view": "timeSeries", "stacked": true, "period":300, "stat":"Sum",
            "region":"us-east-1", "title":"DynamoErrors"}}]}
Outputs:
  AWSIAMSumoLogicUser:
    Value: !Ref AWSIAMSumoLogicUser
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicUser'
  AWSIAMSumoLogicUserAccessKey:
    Value: !Ref AWSIAMSumoLogicUserAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicUserAccessKey'
  AWSS3CloudtrailBucket:
    Value: !Ref AWSS3CloudtrailBucket
    Export:
      Name: !Sub '${AWS::StackName}-CloudtrailBucket'
  AWSIAMEnforceMfaPolicy:
    Value: !Ref AWSIAMEnforceMfaPolicy
    Export:
      Name: !Sub '${AWS::StackName}-EnforceMfaPolicy'
  AWSS3CloudformationBucket:
    Value: !Ref AWSS3CloudformationBucket
    Export:
      Name: !Sub '${AWS::StackName}-CloudformationBucket'
  FhcrcVpnCidrip:
    Value: !Ref FhcrcVpnCidrip
    Export:
      Name: !Sub '${AWS::StackName}-FhcrcVpnCidrip'
  AWSLambaCloudformationFunction:
    Value: !Ref AWSLambaCloudformationFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambaCloudformationFunction'
  AWSSNSCloudformationTopic:
    Value: !Ref AWSSNSCloudformationTopic
    Export:
      Name: !Sub '${AWS::StackName}-CloudformationTopic'
