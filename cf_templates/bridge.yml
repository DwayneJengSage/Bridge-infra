Description: Common resources for AWS account
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InitNewUserPassword:
    Type: String
    NoEcho: true
  JacobianUserPassword:
    Type: String
    NoEcho: true
  NewRelicAccountId:
    Type: String
    NoEcho: true
  NewRelicExternalId:
    Type: String
    NoEcho: true
Resources:
  AWSIAMXavierSchildwachterUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: x.schildwachter@sagebase.org
      Groups:
        - !Ref AWSIAMPowerUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMKhaiDoUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: khai.do@sagebase.org
      Groups:
        - !Ref AWSIAMPowerUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMAlxDarkUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: alx.dark@sagebase.org
      Groups:
        - !Ref AWSIAMPowerUsersGroup
      LoginProfile:
        Password: !Ref InitNewUserPassword
        PasswordResetRequired: true
  AWSIAMPowerUsersGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
        - !ImportValue bootstrap-EnforceMfaPolicy
  JacobianAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - codecommit:GetCommit
            - codecommit:GitPull
            - dynamodb:BatchGetItem
            - dynamodb:GetItem
            - dynamodb:GetRecords
            - sqs:ReceiveMessage
            - sdb:Select
            Resource: "*"
  AWSIAMJacobianUser:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMAuditorsGroup
      LoginProfile:
        Password: !Ref JacobianUserPassword
  AWSIAMAuditorsGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - !Ref JacobianAccessPolicy
        - !ImportValue bootstrap-EnforceMfaPolicy
  AWSIAMSumoLogicUser:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMLoggingServiceGroup
  AWSIAMSumoLogicUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref AWSIAMSumoLogicUser
  IAMLoggingServiceManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            Action:
              - 's3:Get*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - arn:aws:s3:::elasticbeanstalk-
                  - !Ref AWS::Region
                  - -
                  - !Ref AWS::AccountId
                  - /*
  AWSIAMLoggingServiceGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - !Ref IAMLoggingServiceManagedPolicy
  AWSIAMNewRelicBudgetPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "NewRelicBudgetPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "budgets:ViewBudget"
            Resource: "*"
      Roles:
        -
          Ref: AWSIAMNewRelicInfrastructureServiceRole
  AWSIAMNewRelicInfrastructureServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref NewRelicAccountId
                    - ':root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: !Ref NewRelicExternalId
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
  AWSSNSDynamoTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: bridgeops@sagebase.org
          Protocol: email
  AWSCWDynmoGetRecordsErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSDynamoTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: SystemErrors
      Namespace: AWS/DynamoDB
      Dimensions:
        -
          "Name": "Operation"
          "Value": "GetRecords"
      Period: 900
      Statistic: Maximum
      Threshold: 1
  AWSCWDynamoDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: !Join
        - ''
        - - >-
            {"widgets": [
            {"type":"metric", "x":0, "y":0, "width":12, "height":6, "properties":
            {"metrics":[
            [ "AWS/DynamoDB", "SystemErrors", "Operation", "GetRecords", {"stat": "Sum"}]],
            "view": "timeSeries", "stacked": true, "period":300, "stat":"Sum",
            "region":"us-east-1", "title":"DynamoErrors"}}]}
Outputs:
  AWSIAMSumoLogicUser:
    Value: !Ref AWSIAMSumoLogicUser
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicUser'
  AWSIAMSumoLogicUserAccessKey:
    Value: !Ref AWSIAMSumoLogicUserAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicUserAccessKey'
  AWSIAMSumoLogicUserSecretAccessKey:
    Value: !GetAtt AWSIAMSumoLogicUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicSecretAccessKey'
